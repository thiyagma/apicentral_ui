{"version":3,"sources":["../server/notifier.js"],"names":["parseQuery","string","params","split","result","forEach","param","parts","Array","isArray","push","decodeURIComponent","Connection","socket","routes","_requests","_socket","_routes","_listeners","on","_onMessage","bind","close","request","some","route","pathRegexp","path","test","uri","length","groups","exec","index","name","message","JSON","parse","op","_validate","_exec","send","error","statusCode","filter","req","id","stringify","cb","then","catch","undefined","event","Notifier","_connections","_notifyListeners","connections","connection","indexOf","splice","server","_wsServer","Server","_onConnection","console"],"mappings":"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","file":"notifier.js","sourcesContent":["import ws from 'ws';\r\nimport pathToRegexp from 'path-to-regexp';\r\n\r\nfunction parseQuery(string) {\r\n  const params = string.split('&');\r\n  const result = {};\r\n  params.forEach((param) => {\r\n    const parts = param.split('=');\r\n    // if we already have this parameter, it must be an array\r\n    if (result[parts[0]]) {\r\n      if (!Array.isArray(result[parts[0]])) {\r\n        result[parts[0]] = [result[parts[0]]];\r\n      }\r\n      result[parts[0]].push(decodeURIComponent(parts[1]));\r\n    } else {\r\n      result[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nclass Connection {\r\n\r\n  constructor(socket, routes) {\r\n    this._requests = [];\r\n    this._socket = socket;\r\n    this._routes = routes;\r\n    this._listeners = {};\r\n\r\n    this._socket.on('message', this._onMessage.bind(this));\r\n    this._socket.on('close', this.close.bind(this));\r\n  }\r\n\r\n  _validate(request) {\r\n    // gets all routes and check if there is a match\r\n    return this._routes.some((route) => {\r\n      const params = [];\r\n      // params will be populated by pathToRegexp with the dynamic portios of\r\n      // the route\r\n      const pathRegexp = pathToRegexp(route.path, params);\r\n      // path needs to be a valid express route\r\n      if (pathRegexp.test(request.uri)) {\r\n        if (params.length > 0) {\r\n          // grap the param values for the dynamic URL\r\n          const groups = pathRegexp.exec(request.uri);\r\n          params.forEach((param, index) => {\r\n            // the resulting group has index 0 as the entire expression\r\n            // this is why we have to increment index by 1\r\n            request.params[param.name] = groups[index + 1];\r\n          });\r\n        }\r\n        // add the route path to the request so that we can easily\r\n        // reference which route was used for this request\r\n        request.path = route.path;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  _onMessage(message) {\r\n    const request = JSON.parse(message);\r\n    if (request.op === 'start') {\r\n      // Split out query parameters\r\n      const parts = request.uri.split('?');\r\n      request.uri = parts[0];\r\n      if (parts[1]) {\r\n        request.params = parseQuery(parts[1]);\r\n      } else {\r\n        request.params = [];\r\n      }\r\n      if (this._validate(request)) {\r\n        this._requests.push(request);\r\n        this._exec(request);\r\n      } else {\r\n        this._socket.send({\r\n          error: { statusCode: 404, message: `unknown uri ${request.uri}` }\r\n        });\r\n      }\r\n    } else if (request.op === 'stop') {\r\n      this._requests = this._requests.filter(req => req.id !== request.id);\r\n    } else if (request.op === 'ping') {\r\n      this._socket.send(JSON.stringify({ op: 'ping' }));\r\n    } else {\r\n      this._socket.send({\r\n        error: { statusCode: 404, message: `unknown op ${request.op}` }\r\n      });\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  _exec(request) {\r\n    // stop after the first matching route\r\n    this._routes.some((route) => {\r\n      if (request.path === route.path) {\r\n        const socket = this._socket;\r\n        route.cb(request.params)\r\n          .then((result) => {\r\n            socket.send(\r\n              JSON.stringify({ op: 'update', id: request.id, result })\r\n            );\r\n          })\r\n          .catch(error => (\r\n            socket.send(\r\n              JSON.stringify({ op: 'error', id: request.id, error })\r\n            )\r\n          ));\r\n        return true;\r\n      }\r\n      return false;\r\n    }, this);\r\n  }\r\n\r\n  close() {\r\n    if (this._socket) {\r\n      this._socket.close();\r\n      this._socket = undefined;\r\n    }\r\n    // notify possible listeners on the connection close event\r\n    if (this._listeners.close) {\r\n      this._listeners.close();\r\n    }\r\n  }\r\n\r\n  test(cb) {\r\n    if (this._socket) {\r\n      this._requests.forEach((request) => {\r\n        if (cb(request)) {\r\n          this._exec(request);\r\n        }\r\n      }, this);\r\n    }\r\n  }\r\n\r\n  on(event, cb) {\r\n    if (event === 'close') {\r\n      this._listeners[event] = cb;\r\n    }\r\n  }\r\n}\r\n\r\nexport default class Notifier {\r\n\r\n  constructor() {\r\n    this._connections = [];\r\n    this._routes = [];\r\n    this._notifyListeners = [];\r\n  }\r\n\r\n  _onConnection(socket) {\r\n    const connections = this._connections;\r\n    const connection = new Connection(socket, this._routes);\r\n    connections.push(connection);\r\n    connection.on('close', () => {\r\n      const index = connections.indexOf(connection);\r\n      if (index) {\r\n        connections.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  listen(server) {\r\n    this._wsServer = new ws.Server({ server });\r\n    this._wsServer.on('connection', this._onConnection.bind(this));\r\n  }\r\n\r\n  use(path, cb) {\r\n    if (!this._wsServer) {\r\n      this._routes.push({ path, cb });\r\n    } else {\r\n      console.error('Cannot add listener to Notifier after listen is active.');\r\n    }\r\n  }\r\n\r\n  test(cb) {\r\n    this._connections.forEach(\r\n      connection => connection.test(cb)\r\n    );\r\n  }\r\n}\r\n"]}